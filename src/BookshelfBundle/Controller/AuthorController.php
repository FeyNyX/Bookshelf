<?php

namespace BookshelfBundle\Controller;

use BookshelfBundle\Entity\Author;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Template;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;
use Symfony\Component\HttpFoundation\Request;

/**
 * Class AuthorController
 * @package BookshelfBundle\Controller
 * @Route("/author")
 */
class AuthorController extends Controller
{
    /**
     * @Route("/show/{id}")
     * @Template()
     */
    public function showAction($id)
    {
        $repo = $this->getDoctrine()->getRepository("BookshelfBundle:Author");
        $author = $repo->find($id);

        return array(
            "author" => $author
        );
    }

    // This controller generates a form used to generate a new bookshelf. "createAction" controller (below) handles the form.
    /**
     * @Route("/createForm")
     * @Template()
     */
    public function createFormAction()
    {
        $form = $this->createFormBuilder()
            ->add("name", "text")
            ->add("description", "textarea")
            ->add("save", "submit", array("label" => "Add an author"))
            ->getForm();

        return array(
            "form" => $form->createView()
        );
    }

    // This controller handles the form generated by "createFormAction" controller.
    /**
     * @Route("/create")
     * @Method("POST")
     */
    public function createAction(Request $request)
    {
        $newAuthor = new Author();

        $form = $this->createFormBuilder($newAuthor)
            ->add("name", "text")
            ->add("description", "textarea")
            ->add("save", "submit", array("label" => "Add an author"))
            ->getForm();

        $form->handleRequest($request);

        $validator = $this->get("validator");
        $errors = $validator->validate($form);

        if ($form->isValid()) {
            // Only if form passes the validation, data is flushed.
            $em = $this->getDoctrine()->getManager();
            $em->persist($newAuthor);
            $em->flush();

            return $this->redirectToRoute("bookshelf_author_show", array("id" => $newAuthor->getId()));
        } else {
            return $this->render("BookshelfBundle:Author:createForm.html.twig", array("form" => $form, "errors" => $errors));
        }
    }

    /**
     * @Route("/delete{id}")
     * @Method("POST")
     */
    public function deleteAction($id)
    {
        $repo = $this->getDoctrine()->getRepository("BookshelfBundle:Author");
        $author = $repo->find($id);

        $em = $this->getDoctrine()->getManager();
        $em->remove($author);
        $em->flush();

        return $this->redirectToRoute("bookshelf_bookshelf_showall");
    }

    /**
     * @Route("/showBestBooks/{id}")
     * @Template()
     */
    public function showBestBooksAction($id)
    {
        $em = $this->getDoctrine()->getManager();
        $query = $em->createQuery("SELECT b FROM BookshelfBundle:Book b WHERE b.rating >= 5 AND b.author = :id")->setParameter("id", $id);
        $books = $query->getResult();

        $author = $this->getDoctrine()->getRepository("BookshelfBundle:Author")->find($id);

        return array("books" => $books, "author" => $author);
    }

}
