<?php

namespace BookshelfBundle\Controller;

use BookshelfBundle\Entity\Book;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Template;
use Symfony\Component\HttpFoundation\Request;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;

/**
 * Class BookController
 * @package BookshelfBundle\Controller
 * @Route("/book")
 */
class BookController extends Controller
{
    /**
     * @Route("/show/{id}")
     * @Template()
     */
    public function showAction($id)
    {
        $repo = $this->getDoctrine()->getRepository("BookshelfBundle:Book");
        $book = $repo->find($id);

        return array(
            'book' => $book
        );
    }

    // This controller generates a form used to generate a new bookshelf. "createAction" controller (below) handles the form.
    /**
     * @Route("/createForm")
     * @Template()
     */
    public function createFormAction()
    {
        $form = $this->createFormBuilder()
            ->add("name", "text")
            ->add("author", "entity", array("class" => "BookshelfBundle:Author", "choice_label" => "name"))
            ->add("pagesNo", "number")
            ->add("description", "textarea")
            ->add("rating", "number")
            ->add("save", "submit", array("label" => "Add a book"))
            ->getForm();

        return array(
            "form" => $form->createView()
        );
    }

    // This controller handles the form generated by "createFormAction" controller.
    /**
     * @Route("/create")
     */
    public function createAction(Request $request)
    {
        $newBook = new Book();

        $form = $this->createFormBuilder($newBook)
            ->add("name", "text")
            ->add("author", "entity", array("class" => "BookshelfBundle:Author", "choice_label" => "name"))
            ->add("pagesNo", "number")
            ->add("description", "textarea")
            ->add("rating", "number")
            ->add("save", "submit", array("label" => "Add a book"))
            ->getForm();

        $form->handleRequest($request);

        $validator = $this->get("validator");
        $errors = $validator->validate($form);

        if ($form->isValid()) {
            // Only if form passes the validation, data is flushed.
            $em = $this->getDoctrine()->getManager();
            $em->persist($newBook);
            $em->flush();

            return $this->redirectToRoute("bookshelf_book_show", array("id" => $newBook->getId()));
        } else {
            return $this->render("BookshelfBundle:Book:createForm.html.twig", array("form" => $form, "errors" => $errors));
        }
    }

    /**
     * @Route("/delete{id}")
     * @Method("POST")
     */
    public function deleteAction($id)
    {
        $repo = $this->getDoctrine()->getRepository("BookshelfBundle:Book");
        $book = $repo->find($id);

        $em = $this->getDoctrine()->getManager();
        $em->remove($book);
        $em->flush();

        return $this->redirectToRoute("bookshelf_bookshelf_showall");
    }

}
