<?php

namespace BookshelfBundle\Controller;

use BookshelfBundle\Entity\Book;
use BookshelfBundle\Entity\Bookshelf;
use Doctrine\ORM\EntityManager;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Template;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;
use Symfony\Component\Form\FormBuilder;
use Symfony\Component\HttpFoundation\Request;

/**
 * Class BookshelfController
 * @package BookshelfBundle\Controller
 */
class BookshelfController extends Controller
{
    /**
     * @Route("/")
     * @Template()
     */
    public function showAllAction()
    {
        $allBookshelves = $repo = $this->getDoctrine()->getRepository("BookshelfBundle:Bookshelf")->findAll();

        return array(
            "bookshelves" => $allBookshelves
        );
    }

    /**
     * @Route("/show/{id}")
     * @Template()
     */
    public function showAction($id)
    {
        $bookshelf = $repo = $this->getDoctrine()->getRepository("BookshelfBundle:Bookshelf")->find($id);

        $form = $this->createFormBuilder()
            ->add("name", "entity", array("class" => "BookshelfBundle:Book", "choice_label" => "name"))
            ->add("add", "submit", array("label" => "Add this book"))
            ->getForm();

        return array(
            "bookshelf" => $bookshelf,
            "bookshelfId" => $bookshelf->getId(),
            "form" => $form->createView()
        );
    }

    // This controller generates a form used to generate a new bookshelf. "createAction" controller (below) handles the form.
    /**
     * @Route("/createForm")
     * @Template()
     */
    public function createFormAction()
    {
        $form = $this->createFormBuilder()
            ->add("name", "text")
            ->add("submit", "submit")
            ->getForm();

        return array(
            'form' => $form->createView()
        );
    }

    // This controller handles the form generated by "createFormAction" controller.
    /**
     * @Route("/create")
     * @Method("POST")
     */
    public function createAction(Request $request)
    {
        $newBookshelf = new Bookshelf();

        $form = $this->createFormBuilder($newBookshelf)
            ->add("name", "text")
            ->add("submit", "submit")
            ->getForm();

        $form->handleRequest($request);

        $validator = $this->get("validator");
        $errors = $validator->validate($newBookshelf);

        if ($form->isValid()) {
            // Data is being flushed only when the form passes the validation.
            $em = $this->getDoctrine()->getManager();
            $em->persist($newBookshelf);
            $em->flush();

            return $this->redirectToRoute("bookshelf_bookshelf_show", array("id" => $newBookshelf->getId()));
        } else {
            // Form is being sent again for user's convenience.
            return $this->render("BookshelfBundle:Bookshelf:createForm.html.twig", array("form" => $form, "errors" => $errors));
        }
    }

    /**
     * @Route("/delete/{id}")
     */
    public function deleteAction($id)
    {
        $bookshelf = $this->getDoctrine()->getRepository("BookshelfBundle:Bookshelf")->find($id);

        $em = $this->getDoctrine()->getManager();
        $em->remove($bookshelf);
        $em->flush();

        return $this->redirectToRoute("bookshelf_bookshelf_showall");
    }

    /**
     * @Route("/addBook/{bookshelfId}")
     * @Method("POST")
     */
    // This time I'm passing "bookshelfId" instead of just "id", because I think that in this particular case it's less confusing.
    public function addBookAction(Request $request, $bookshelfId)
    {
        $addedBook = new Book();

        $form = $this->createFormBuilder($addedBook)
            // The actual thing that is being held under the "name" is an object of the Book class.
            ->add("name", "entity", array("class" => "BookshelfBundle:Book", "choice_label" => "name"))
            ->add("add", "submit", array("label" => "Add this book"))
            ->getForm();

        $form->handleRequest($request);

        // Although it seems weird, this creates a book object that will be then added to the bookshelf.
        $book = $addedBook->getName();

        $em = $this->getDoctrine()->getManager();

        $repo = $this->getDoctrine()->getRepository("BookshelfBundle:Bookshelf");
        $bookshelf = $repo->find($bookshelfId);

        $bookshelf->addBook($book);
        $em->flush();

        return $this->redirectToRoute("bookshelf_bookshelf_show", array("id" => $bookshelfId));
    }

}
